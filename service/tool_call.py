import os
from dotenv import load_dotenv
from openai import OpenAI
import json

from service.market import MarketService

def load_environment():
    """Load environment variables and return the OpenAI API key."""
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OPENAI_API_KEY is not set in the environment.")
    return api_key

def initialize_client(api_key):
    """Initialize and return the OpenAI client."""
    return OpenAI(api_key=api_key)

def define_tools():
    """Define and return the list of tools for the model."""
    return [
         {
            "type": "function",
            "name": "get_horoscope",
            "description": "Get today's horoscope for an astrological sign.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sign": {
                        "type": "string",
                        "description": "An astrological sign like Taurus or Aquarius",
                    },
                },
                "required": ["sign"],
            },
        },
        {
            "type": "function",
            "name": "get_ticker_price",
            "description": "Get the current price for a given ticker symbol.",
            "parameters": {
                "type": "object",
                "properties": {
                    "symbol": {
                        "type": "string",
                        "description": "The ticker symbol for the asset, e.g., AAPL, TSLA.",
                    },
                },
                "required": ["symbol"],
            },
        },
    ]
def get_horoscope(sign):
    """Return a mock horoscope for the given sign."""
    return f"{sign}: Next Tuesday you will befriend a baby otter."

def get_ticker_price(symbol):
    """Return the current price for the given ticker symbol."""
    market_service = MarketService()
    price = market_service.get_ticker_price(symbol)
    if price is not None:
        return f"The current price of {symbol} is ${price:.2f}"
    return f"Price for {symbol} could not be retrieved."

def process_response(input_list, response):
    for item in response.output:
        if item.type != "function_call":
            continue

        name = item.name
        args = json.loads(item.arguments)

        result = call_function(name, args)
        input_list.append({
            "type": "function_call_output",
            "call_id": item.call_id,
            "output": str(result)
        })

def call_function(name, args):
    if name == "get_horoscope":
        return get_horoscope(**args)
    if name == "get_ticker_price":
        return get_ticker_price(**args)


def invoke_llm(query: str):
    api_key = load_environment()
    client = initialize_client(api_key)
    tools = define_tools()

    input_list = [
        {"role": "user", "content": query}
    ]

    # 2. Prompt the model with tools defined
    response = client.responses.create(
        model="gpt-5",
        tools=tools,
        input=input_list,
    )

    # Save function call outputs for subsequent requests
    input_list += response.output

    process_response(input_list, response)

    response = client.responses.create(
        model="gpt-5",
        instructions="Respond with the details generated by a tool.",
        tools=tools,
        input=input_list,
    )

    # 5. The model should be able to give a response!
    # print("Final output:")
    # print(response.model_dump_json(indent=2))
    return response.output_text
